#!/usr/bin/env python3
"""
Plot phase velocity profiles.
Position and k-wavenumber are read from IDL files generated by GENRAY.
"""

from scipy.io import readsav
from raw_data_async import get_dbs
import numpy as np, seaborn as sns
from scipy.signal import spectrogram
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

plt.rcParams.update({'axes.formatter.use_mathtext': True,
                     'axes.formatter.limits': [-3, 4],
                     'pdf.fonttype': 42})
sns.set(style='ticks', palette='Set2')


# %%
def read_idl(shot_number: int) -> object:
    """
    Read GENRAY data
    :type shot_number: int
    :rtype: dict
    """
    idl_file: str = f"../proc_data/{shot_number}_dbs8_positions_vs_time.sav"
    idl_data: dict = readsav(idl_file)
    return idl_data


def load_data(shot_number, t_range: tuple) -> tuple:
    """
    Load DBS nc raw data
    :param shot_number: int
    :param t_range: tuple
    :return: dbs data, time
    """
    fname = f"../rawdata/DBS_{shot_number}.nc"
    t1, t2 = 2500, 3500
    dbs, t_dbs = get_dbs(shot_number, t_range)
    print(f"Read {fname} data from file.")
    return dbs, t_dbs


def calc_quad(dbs, t, nperseg=1024 * 8, nfft=1024 * 8, overlap=0.5) -> tuple:
    """Calculate quadrature"""
    fs = 1 / abs(np.mean(np.diff(t)))
    noverlap = int(nperseg * overlap)
    freq, time, spec = spectrogram(dbs, nperseg=nperseg, nfft=nfft,
                                   noverlap=noverlap, fs=float(fs),
                                   return_onesided=False)
    return spec, freq, time + t[0]


def save_quad(Sx, freq, time, t1, t2) -> None:
    from os.path import isfile
    fname = f'../proc_data/quad_spec_{shot}_{t1:.0f}_{t2:.0f}.npz'
    if isfile(fname):
        print(f'{fname} exists! Pass!')
        return None
    else:
        np.savez(fname, Sx=Sx, freq=freq, time=time)


def plots(shot):
    t1, t2 = 2500, 3400

    idl_dat: dict = read_idl(shot)
    t_sc = idl_dat['time']
    psi_sc = idl_dat['psiarray']
    k_sc = idl_dat['kscarray']

    data, t = load_data(shot, (t1, t2))
    Sx, freq, time = calc_quad(data, t)
    save_quad(Sx, freq, time, t1, t2)

    # %%
    k_time = np.empty((8, len(time)))
    psi_time = np.empty_like(k_time)

    for i in range(8):
        foo_intp = interp1d(t_sc, k_sc[:, i], kind='nearest')
        k_time[i, :] = foo_intp(time)
        foo_intp = interp1d(t_sc, psi_sc[:, i], kind='nearest')
        psi_time[i, :] = foo_intp(time)

    f_av = np.sum(Sx * freq[None, :, None], axis=1) / np.sum(Sx, axis=1)
    vel_perp = 2 * np.pi * f_av / k_time / 1e2

    fig, ax = plt.subplots(figsize=(5, 4))
    for i in range(psi_time.shape[0]):
        ax.plot(psi_time[i, :], vel_perp[i, :], '.', alpha=0.5,
                label=f'ch{i + 1}')
    ax.axhline(0, ls='--', c='gray')
    ax.set(ylabel=r"$V_\perp$ (km/s)", xlabel=r"$\psi_n$",
           title=f"{shot} at {t1}-{t2}ms", xlim=(0, 1))
    plt.legend(loc=0, fontsize=8)
    plt.tight_layout()
    fig.savefig(f"../fig/vel_perp_{shot}.pdf", transparent=True, dpi=300)
    plt.show()

    # %%
    Sm = np.sum(Sx, axis=1)
    fig, ax = plt.subplots(figsize=(5, 4))
    for i in range(k_time.shape[0]):
        ax.loglog(k_time[i, :], Sm[i, :], '.', alpha=0.5, label=f'ch{i + 1}')
    ax.set(ylabel="Spectra", xlabel=r"$k_\perp$ (rad/cm)",
           title=f"{shot} at {t1}-{t2}ms")
    plt.legend(loc=0, fontsize=8)
    plt.tight_layout()
    fig.savefig(f"../fig/spec_perp_{shot}.pdf", transparent=True, dpi=300)
    plt.show()


# %%
if __name__ == '__main__':
    shot = 171956
    plots(shot)
